image: registry.gitlab.com/portlandlabs/containers/php/8.2:latest

stages:
  - test
  - build
  - deploy
  - qa

cache:
  paths:
    - vendor/

# Gitlab provided testing
include:
  - template: SAST.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
#  - template: License-Scanning.gitlab-ci.yml

.ssh_key_setup: &ssh_key_setup
    # Adding support for ssh keys in order to download packages from bitbucket.
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan bitbucket.org >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "systems@portlandlabs.com"
    - git config --global user.name "Gitlab CI"

# Test with PHPUnit
test:unit:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'external_pull_request_event' || $CI_PIPELINE_SOURCE == 'push'
  cache:
    paths:
      - vendor/
  coverage: '/^\s*Cov:\s*\d+\.\d+?%$/'
  artifacts:
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.cobertura.xml
  before_script:
    - *ssh_key_setup
    - composer install --dev --no-interaction --optimize-autoloader
  script:
    - XDEBUG_MODE=coverage composer test:unit -- --colors=never --coverage --coverage-cobertura=coverage.cobertura.xml --log-junit=junit.xml

test:lint:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_PIPELINE_SOURCE == 'push'
  cache:
    paths:
      - vendor/
  artifacts:
    reports:
      codequality: gitlab.json
  before_script:
    - *ssh_key_setup
    - composer install --no-interaction --optimize-autoloader
  script:
    - composer test:lint -- --format=gitlab > gitlab.json; composer test:lint # One for generating gitlab.json, another for plain text output

build:tar:
  stage: build
  artifacts:
    paths:
      - release.tar.gz
  rules:
    - if: $CI_COMMIT_BRANCH =~ /(develop|main)/
  before_script:
    - *ssh_key_setup
    # Install production dependencies
    - composer self-update --2
    - composer install --no-dev --no-interaction --optimize-autoloader
  script:
    # Delete anything we don't want to include in the tar
    - rm -rf tests resources .git node_modules
    - tar -zcvf /builds/release.tar.gz .
    # Move the built tar to the correct location. This also verifies the file was created.
    - mv /builds/release.tar.gz $CI_PROJECT_DIR/release.tar.gz

.stage_template: &stage
  environment:
    name: Stage deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == 'develop'

.prod_template: &prod
  environment:
    name: Production deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == 'main'

.deploy_template: &deploy
  stage: deploy
  before_script:
    - prepare `pwd`/release.tar.gz .codedeployvars appspec.yml
  script:
    - deploy release.tar.gz

deploy:stage:
  <<: *deploy
  <<: *stage

deploy:production:
  <<: *deploy
  <<: *prod
  when: manual

.e2e_template: &e2e
  stage: qa
  cache:
    paths:
      - vendor/
  artifacts:
    reports:
      junit: junit.xml
  before_script:
    - *ssh_key_setup
    - composer install --no-interaction --optimize-autoloader
    - ./vendor/bin/bdi detect drivers # Load drivers
  script:
    - export PANTHER_NO_SANDBOX=1
    - composer test:e2e --log-junit=junit.xml

e2e:stage:
  <<: *e2e
  <<: *stage

e2e:production:
  <<: *e2e
  <<: *prod